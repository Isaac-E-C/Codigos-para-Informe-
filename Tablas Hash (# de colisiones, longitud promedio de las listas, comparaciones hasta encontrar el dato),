#include <iostream>
#include <chrono>
#include <cstdlib>
using namespace std;
using namespace std::chrono;

struct Nodo {
    int clave;
    Nodo* siguiente;
    Nodo(int c) : clave(c), siguiente(nullptr) {}
};

class TablaHash {
private:
    Nodo** tabla;
    int tam;
    int colisiones;
    int elementos;

public:
    int comparacionesBusqueda;

    TablaHash(int t) {
        tam = t;
        tabla = new Nodo*[tam];
        for (int i = 0; i < tam; ++i) tabla[i] = nullptr;
        colisiones = 0;
        elementos = 0;
        comparacionesBusqueda = 0;
    }

    ~TablaHash() {
        for (int i = 0; i < tam; ++i) {
            Nodo* actual = tabla[i];
            while (actual != nullptr) {
                Nodo* temp = actual;
                actual = actual->siguiente;
                delete temp;
            }
        }
        delete[] tabla;
    }

    int funcionHash(int clave) {
        return clave % tam;
    }

    void insertar(int clave) {
        int pos = funcionHash(clave);
        Nodo* nuevo = new Nodo(clave);
        if (tabla[pos] != nullptr)
            colisiones++;
        nuevo->siguiente = tabla[pos];
        tabla[pos] = nuevo;
        elementos++;
    }

    bool buscar(int clave) {
        int pos = funcionHash(clave);
        Nodo* actual = tabla[pos];
        comparacionesBusqueda = 0;

        while (actual != nullptr) {
            comparacionesBusqueda++;
            if (actual->clave == clave)
                return true;
            actual = actual->siguiente;
        }
        return false;
    }

    double longitudPromedioListas() {
        int total = 0;
        for (int i = 0; i < tam; ++i) {
            Nodo* actual = tabla[i];
            while (actual != nullptr) {
                total++;
                actual = actual->siguiente;
            }
        }
        return (double)total / tam;
    }

    int getColisiones() { return colisiones; }
    int getElementos() { return elementos; }
};



void generarDatos(int datos[], int tam, int tipo) {
    switch (tipo) {
        case 1:
            for (int i = 0; i < tam; i++)
                datos[i] = i + rand() % 5;
            break;
        case 2:
            for (int i = 0; i < tam; i++)
                datos[i] = tam - i;
            break;
        case 3:
            for (int i = 0; i < tam; i++)
                datos[i] = rand() % (tam * 2);
            break;
    }
}



int main() {
    int tam, tipo;
    cout << "Tamanio del arreglo (100, 1000, 10000): ";
    cin >> tam;

    cout << "Tipo de datos:\n1. Casi ordenado\n2. Reverso\n3. Aleatorio\nSeleccione opcion: ";
    cin >> tipo;

    int* datos = new int[tam];
    generarDatos(datos, tam, tipo);

    cout << "\n--- Datos generados ---\n";
    for (int i = 0; i < tam; i++) {
        cout << datos[i] << " ";
        if ((i + 1) % 20 == 0) cout << endl;
    }

    TablaHash tablaHash(tam);

    auto inicio = high_resolution_clock::now();
    for (int i = 0; i < tam; i++)
        tablaHash.insertar(datos[i]);
    auto fin = high_resolution_clock::now();
    auto duracionInsercion = duration_cast<milliseconds>(fin - inicio).count();

    int claveBuscar;
    cout << "\n\nIngrese una clave a buscar manualmente: ";
    cin >> claveBuscar;

    inicio = high_resolution_clock::now();
    bool encontrado = tablaHash.buscar(claveBuscar);
    fin = high_resolution_clock::now();
    auto duracionBusqueda = duration_cast<microseconds>(fin - inicio).count();


    cout << "\n--- Resultados ---\n";
    cout << "Elementos insertados: " << tablaHash.getElementos() << endl;
    cout << "Colisiones: " << tablaHash.getColisiones() << endl;
    cout << "Comparaciones en la búsqueda: " << tablaHash.comparacionesBusqueda << endl;
    cout << "Longitud promedio de listas: " << tablaHash.longitudPromedioListas() << endl;
    cout << "Tiempo de inserción: " << duracionInsercion << " ms" << endl;
    cout << "Tiempo de búsqueda manual: " << duracionBusqueda << " microsegundos" << endl;
    cout << "Resultado de la búsqueda: " << (encontrado ? "Encontrado" : "No encontrado") << endl;

    delete[] datos;
    return 0;
}
